version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
         name: Run frontend test
         command: |
           cd frontend
           npm install
           npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
         name: Run backend test
         command: |
           cd backend
           npm install
           npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: scan-frontend
          command: |
           # Your job code here
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
              cd backend
              npm audit fix --audit-level=critical --force
   deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
         name: Install dependencies
         command: |
          yum install -y tar gzip
          
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
                         
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            # Use the workflow id to mark your CloudFormation stacks so that you can reference them later on (ex: rollback). 
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
            
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt
                        
            
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
         fingerprints:
          - "a8:3f:bf:fb:d7:75:1c:b9:ab:fb:17:04:93:c9:3a:ee"
      - attach_workspace:
          at: ~/

      - install_ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      
      - destroy-environment

      # Here's where you will add some code to rollback on failure   

  run-migrations:
    docker:
    - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
            name: Run migrations
            command: | 
                cd backend
                npm install
                npm run migrations > migrations_dump.txt
      - run:
          name: Send migration result to kvdb
          command:  | 
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                curl --insecure https://kvdb.io/8AyBmqRjdt5dJfMh77punJ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
              fi
      - destroy-environment
      - revert-migrations
   
  deploy-frontend:
    docker:
        # Docker image here that supports Ansible
        - image: cimg/base:stable
    steps:
        # Checkout code from git
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
           fingerprints:
            - "a8:3f:bf:fb:d7:75:1c:b9:ab:fb:17:04:93:c9:3a:ee"
        - attach_workspace:
            at: ~/
        - install_ansible  
        - install_awscli
        - install_nodejs  
        - run:
            name: Get backend url
            command: |
                  export BACKEND_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filter Name=tag:Name,Values=backend-${CRICLE_WORKFLOW_ID:0:7} \
                  --output text
                  )
                  export API_URL="http://${BACKEND_IP}:3030"
                  echo "API_URL = ${API_URL}"
                  echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                  cat frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
                  cd frontend
                  sudo npm install -g npm@latest
                  rm -rf node_modules
                  npm install
                  npm run build
                  aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment
        - revert-migrations

             
  
  deploy-backend:
    docker:
        # Docker image here that supports Ansible
        - image: cimg/base:stable
    steps:
        # Checkout code from git
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
           fingerprints:
            - "a8:3f:bf:fb:d7:75:1c:b9:ab:fb:17:04:93:c9:3a:ee"
        - attach_workspace:
            at: ~/
        - install_ansible  
        - install_awscli
        - install_nodejs  

        - run: 
              name: Deploy backend
              command: |
                    cd backend
                  
                    npm i
                    npm run build 
                    cd ..
                    cd .circleci/ansible
                    mkdir files
                    cd files
                    tar -C ../../../backend -cvzf artifact.tar.gz .
                    cd ../
                    echo "Content of the inventory.txt is -----------"
                    cat inventory.txt
                    ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy-environment
        - revert-migrations

  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test
          command: |
             BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
             API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}"
             curl "${API_URL}/api/status"
             
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test for front end
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi           
      - destroy-environment  
      - revert-migrations

   # amazon/aws-cli
  cloudfront-update:
    docker:
     - image:  cimg/base:stable 
    steps:
      - checkout
      - install_nodejs
      - install_awscli

      - run: 
          name: Install dep /Save Old Workflow ID to kvdb.io
          command:  | 
              export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\'WorkflowID\'].Value" \
              --no-paginate --output text)
               echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
               curl https://kvdb.io/8AyBmqRjdt5dJfMh77punJ/old_workflow_id -d  "${OLD_WORKFLOW_ID}"
      - run:
              name: Update Cloudfront distribution 
              command: |
                  aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      - destroy-environment
      - revert-migrations
 
   # Cleanup Stack
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      -  install_awscli
      - install_nodejs

      - run:
          name: Get old stack workflow id and Cleanup
          command: |           
            export OldWorkflowID=$(curl --insecure https://kvdb.io/8AyBmqRjdt5dJfMh77punJ/old_workflow_id)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "$CIRCLE_WORKFLOW_ID"
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                         
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
